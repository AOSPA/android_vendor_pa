/*
 * Copyright (C) 2019 The LineageOS Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.aospa.biometrics.fingerprint.inscreen@1.0;

import IFingerprintInscreenCallback;

interface IFingerprintInscreen {
    /**
     * Information on the position of the scanner
     * Note: X and Y are the left-upper corner of the
     * FOD view, not the center.
     */
    getPositionX() generates (int32_t x);
    getPositionY() generates (int32_t y);
    getSize() generates (int32_t size);
    /**
     * Called when fingerprint enrollment started
     */
    onStartEnroll();
    /**
     * Called when fingerprint enrollment finished
     */
    onFinishEnroll();
    /**
     * Called when the on-screen area of the fingerprint scanner
     * is pressed and ready to scan.
     */
    onPress();
    /**
     * Called when the on-screen area of the scanner is released
     */
    onRelease();
    /**
     * Called when fingerprint scanning is engaged and FOD view is shown
     */
    onShowFODView();
    /**
     * Called when fingerprint scanning is inactivated
     */
    onHideFODView();
    /**
     * Return true if IFingerprintInscreen is responsible for handling
     * of given acquiredInfo + vendorCode.
     */
    handleAcquired(int32_t acquiredInfo, int32_t vendorCode) generates (bool ret);
    /**
     * Return true if IFingerprintInscreen is responsible for handling
     * of given error + vendorCode.
     */
    handleError(int32_t error, int32_t vendorCode) generates (bool ret);
    /**
     * Enable / disable long-pressing on the fingerprint area.
     * Used when in keyguard mode.
     */
    setLongPressEnabled(bool enabled);
    /**
     * Calculate the dimming amount [0, 255] based on the current brightness [0, 255]
     * This can be done by the vendor's kernel, but can also be implemented
     * directly in this hal.
     */
    getDimAmount(int32_t cur_brightness) generates (int32_t cur_brightness);
    /**
     * Should the framework boost the brightness? In ideal scenario the boosting
     * should be handled in the lower layers for the best user experience.
     * If this returns false, then the implementation MUST boost the brightness
     * according to the previous events.
     */
    shouldBoostBrightness() generates (bool ret);
    /**
     * This function is used to register a callback function which is
     * called by the HAL whenever there is a finger up/down event.
     */
    oneway setCallback(IFingerprintInscreenCallback callback);
};
